body {
  background: black; }

/* keeping style block in body to make it easier to see the relationship between elements */
/* Container is nothing special; it's the element that is made full screen.
 * When non-fullscreen, you can add transforms to this element to make the scene
 * make sense in 2D (instead of being centered around the top left).  That transform
 * will cascade down to children when fullscreen though, so make sure to remove it when
 * entering fullscreen.  There's a -moz-full-screen selector that's useful for this.
 */
#container {
  background: black; }

#container:not(:-moz-full-screen) {
  /* this is just to move the scene to the visible area when not in fullscreen VR */
  transform: translate(300px, 300px) rotateX(180deg);
  perspective: 1000px; }

/* All threed-class elements have preserve-3d; preserve-3d is NOT inherited.  (There's an open
 * discussion on w3-style about adding a new transform-style that is like preserve-3d but is
 * inherited.)
 *
 * position: absolute; and 0,0 is also set because we'll position these elements fully using
 * 3D transforms.  Their CSS position is irrelevant for us.  Without this, their CSS position
 * will come into play as well as their transform.
 *
 * When in fullscreen VR, the 0,0,0 position is at the center of the viewport and not the top
 * left.
 *
 * We don't modify the original transform-origin here (50% 50% 0), because that can be useful
 * for moving elements around by their center point.  But it could also be set to 0,0,0 to
 * make it completely clear exactly where/how 3D objects are moving.
 */
.threed {
  transform-style: preserve-3d;
  position: absolute;
  top: 0;
  left: 0; }

/* The camera div just serves as a way to set up a modelview transform for the entire rest of the
 * scene.  The transform that's set on it needs to be the *inverse* of where you want the camera
 * to be; that is, if you want the camera to be at (0, 0, 500), then the transform needs to be
 * set to (0, 0, -500).  The transform-origin is set here because we want to go from the origin
 */
#camera {
  transform-origin: 0 0 0;
  /* the transform itself is set programatically, since it needs to take into account the HMD orientation */ }

.pane {
  overflow: hidden; }

.pane > img {
  width: 200px;
  height: 300px; }

/* XXX The translate -100,-150 moves the center of each element to 0,0.  transform-origin
 * at 50% 50% should take care of that, but I'm not sure why it's not.  (It transforms
 * by half the width/height).
 */
#pane1 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 0, 800px);
  /*width: 320px;
  height: 480px;*/ }

.seats {
  height: 100px;
  width: 1400px;
  background: url('images/seat.png') repeat-x transparent; }

.row1 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 250px, 650px); }

.row2 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 200px, 400px); }

.row3 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 150px, 150px); }

.row4 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 100px, -100px); }

.row5 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 50px, -350px); }

.row6 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, 0px, -600px); }

.row7 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, -50px, -850px); }

.row8 {
  transform: translate(-50%, -50%) scale(1) translate3d(0, -100px, -1100px); }

.exit {
  transform: rotateY(-90deg) scale(0.8, 1) translate3d(400px, 0, 800px);
  color: lime;
  font-family: sans-serif;
  text-shadow: 0 0 3px lime, 0 0 4px lime, 0 0 5px lime, 0 0 6px lime; }

.projector {
  width: 72px;
  height: 30px;
  background: #888888;
  box-shadow: 0 2px 10px rgba(255, 255, 255, 0.5), 0 4px 20px rgba(255, 255, 255, 0.5), 0 2px 30px rgba(255, 255, 255, 0.5), 0 2px 40px rgba(255, 255, 255, 0.5);
  transform: translate3d(0, -500px, -1200px);
  animation: 0.005s flicker linear infinite alternate;
  animation-timing-function: steps(2, end); }

@keyframes flicker {
  from {
    opacity: 1; }

  to {
    opacity: 0.8; } }
